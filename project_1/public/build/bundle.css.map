{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../ContactCard.svelte"
  ],
  "sourcesContent": [
    "<!--\n    Side note:\n    Svelte apps are built from multiple \"Components\" -UI building blocks -UI building blocks.\n    It's the same philosophy as in React, Angular & Vue\n\n    One important concepts on Svelte Reactivity in \"updating array\" is to assigning a new array, not by using\n    push(), pop() method instead always store a new value in variable which used in markup. This is a \"Common\"\n    rule in Svelte.\n\n    Event Modifier:\n    https://svelte.dev/tutorial/event-modifiers\n-->\n<script>\n    //#################################################################\n    // Dependencies\n\n    import ContactCard from \"./ContactCard.svelte\"\n    import CourseGoal from \"./CourseGoal.svelte\"\n\n    //#################################################################\n    // Instant variable\n    let name = \"\"\n    let title = \"\"\n    let image = \"\"\n    let description = \"\"\n    let formState = \"empty\"\n\n    let createdContacts = []\n\n    //#################################################################\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\n    // Label statement in svelte\n    $: uppercaseName = name.toUpperCase ()\n\n    //$: console.log (name)\n\n    // using a dynamic Label statement with if statement\n    $: if (name === \"John Doe\") {\n        console.log (\"It changes the age\")\n        age = 25\n    }\n\n    //#################################################################\n    function addContact (event) {\n        // event.preventDefault ()\n        if (\n            name.trim ().length == 0 ||\n            title.trim ().length == 0 ||\n            image.trim ().length == 0 ||\n            description.trim ().length == 0\n        ) {\n            formState = \"invalid\"\n            return;\n        }\n        // Svelte \"reactivity\" \n        createdContacts =  [\n            ...createdContacts,\n            {\n                id          : Math.random (),\n                name        : name,\n                jobTitl     : title,\n                imageUr     : image,\n                desc        : description\n            }]\n\n        console.log ( {...createdContacts} )\n        formState = \"done\"\n    }\n\n\n    function incrementAge () {\n        age = age + 1\n    }\n\n    // Reset to default name variable\n    function  changeName () {\n        name = \"John Doe\"\n    }\n\n    // Set entered value as global\n    // Bind input element\n    function nameInput (event) {\n        const enteredValue = event.target.value\n        name = enteredValue\n    }\n\n    function jobInput (event) {\n        const enteredValue = event.target.value\n        title = enteredValue\n    }\n\n    function imageInput (event) {\n        const enteredValue = event.target.value\n        image = enteredValue\n    }\n\n    function jobDescInput (event) {\n        const enteredValue = event.target.value\n        description = enteredValue\n    }\n\n    function courseGoalInput (event) {\n        const enteredValue = event.target.value\n        courseGoal = enteredValue\n    }\n\n    function deleteFirst (event) {\n        createdContacts = createdContacts.slice (1)\n\n    }\n    function deleteLast (event) {\n        createdContacts = createdContacts.slice (0, -1)\n\n    }\n\n</script>\n\n<style>\n    #form {\n        width: 30rem;\n        max-width: 100%;\n    }\n</style>\n\n<main>\n    <div id=\"form\">\n        <div class=\"form-control\">\n            <label for=\"userName\">User Name</label>\n            <input type=\"text\" value=\"{name}\" on:input={nameInput} id=\"userName\" />\n        </div>\n        <div class=\"form-control\">\n            <label for=\"jobTitle\">Job Title</label>\n            <input type=\"text\" value=\"{title}\" on:input={jobInput} id=\"jobTitle\" />\n        </div>\n        <div class=\"form-control\">\n            <label for=\"image\">Image URL</label>\n            <input type=\"text\" value=\"{image}\" on:input={imageInput} id=\"image\" />\n        </div>\n        <div class=\"form-control\">\n            <label for=\"desc\">Description</label>\n            <input type=\"text\" value=\"{description}\" on:input={jobDescInput} />\n        </div>\n    </div>\n\n    <!-- Add event modifier -->\n    <button on:click|preventDefault={addContact}>Add Contact Card</button>\n    <button on:click={deleteFirst}>Delete First</button>\n    <button on:click={deleteLast}>Delete Last</button>\n\n    {#if formState === \"invalid\"}\n        <p>Invalid input</p>\n    {:else}\n        <p>Enter some data and hit the button</p>\n    {/if}\n\n    <!-- svelte update the data === svelte update the DOM -->\n    {#each createdContacts as contact, index (contact.id)}\n        <h2># {index + 1}</h2>\n        <ContactCard\n            userName=\"{contact.name}\"\n            jobTitle=\"{contact.title}\"\n            userImage=\"{contact.image}\"\n            description=\"{contact.desc}\"\n            />\n    {:else}\n        <p>Please start adding some contacts, we found none!</p>\n    {/each}\n    <p>Visit the <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> to learn how to build Svelte apps.</p>\n</main>\n",
    "<script>\n    export let userName\n    export let jobTitle\n    export let userImage\n    export let description\n\n    const initialName = userName\n</script>\n\n<style>\n    .contact-card {\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n        max-width: 30rem;\n        border-radius: 5px;\n        margin: 1rem 0;\n    }\n\n    header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        height: 7rem;\n    }\n\n    .thumb {\n        width: 75%;\n        height: 100%;\n    }\n\n    .thumb-placeholder {\n        background: #ccc;\n    }\n\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n    }\n\n    .user-data {\n        width: 67%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        padding-left: 1rem;\n    }\n\n    h1 {\n        font-size: 1rem;\n        font-weight: normal;\n        color: #5a5a5a;\n        margin: 0.5rem 0;\n        font-family: \"Roboto Slab\", sans-serif;\n    }\n\n    h2 {\n        font-size: 1rem;\n        font-weight: normal;\n        color: #5a5a5a;\n        margin: 0;\n        margin-bottom: 0.5rem;\n        font-family: \"Lato\", sans-serif;\n    }\n\n    .description {\n        border-top: 1px solid #ccc;\n        padding: 1rem;\n    }\n\n</style>\n\n<!-- markup -->\n<div class=\"contact-card\">\n    <header>\n        <div class=\"{userImage === true ? \"thumb\" : \"thumb thumb-placeholder\"}\">\n            <img src=\"{userImage}\" alt=\"\">\n        </div>\n        <div class=\"user-data\">\n            <h1>{userName} | {initialName}</h1>\n            <h2>{jobTitle}</h2>\n        </div>\n    </header>\n    <div class=\"description\">\n        <p>A short description</p>\n        <p>{@html description}</p>\n    </div>\n</div>\n\n<!-- end markup -->\n"
  ],
  "names": [],
  "mappings": "AAsHI,KAAK,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AACnB,CAAC;AC/GD,aAAa,cAAC,CAAC,AACX,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACzC,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,IAAI,CAAC,CAAC,AAClB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,kBAAkB,cAAC,CAAC,AAChB,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,GAAG,cAAC,CAAC,AACD,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,AACrB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,YAAY,CAAE,IAAI,AACtB,CAAC,AAED,EAAE,cAAC,CAAC,AACA,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,MAAM,CAAC,CAAC,CAChB,WAAW,CAAE,aAAa,CAAC,CAAC,UAAU,AAC1C,CAAC,AAED,EAAE,cAAC,CAAC,AACA,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,CAAC,CACT,aAAa,CAAE,MAAM,CACrB,WAAW,CAAE,MAAM,CAAC,CAAC,UAAU,AACnC,CAAC,AAED,YAAY,cAAC,CAAC,AACV,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAC1B,OAAO,CAAE,IAAI,AACjB,CAAC"
}